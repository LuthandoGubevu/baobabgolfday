rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email in ["roslyn@baobabbrands.com", "royden@baobabbrands.com"];
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      // Anyone can create a booking. The transaction rule on /holes handles the security for hole sponsorship.
      allow create: if true;
      // Only admins can read, update, or delete bookings
      allow read, update, delete: if isAdmin();
    }

    // Holes collection rules
    match /holes/{holeId} {
      // Anyone can read the status of a hole
      allow read: if true;
      
      // An update to a hole is allowed under two conditions:
      // 1. An admin is performing the update (for confirming/releasing holes).
      // 2. A user is booking a hole for the first time in a transaction.
      allow update: if 
          (isAdmin()) || 
          (
            // This is part of a transaction to book a hole
            request.resource.data.status == 'pending' &&
            resource.data.status == 'available' &&
            // Check that a new booking document is being created in the same transaction
            existsAfter(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)) &&
            !exists(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId))
          );
    }
    
    // Messages collection rules
    match /messages/{messageId} {
        // Allow anyone to submit a message
        allow create: if true;
        // Only admins can read or delete messages
        allow read, delete: if isAdmin();
    }

    // Reminders collection rules
    match /reminders/{reminderId} {
        // Allow anyone to sign up for a reminder
        allow create: if true;
        // Only admins can read or delete reminders
        allow read, delete: if isAdmin();
    }
  }
}

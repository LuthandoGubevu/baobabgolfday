rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return request.auth != null && request.auth.token.email in ["roslyn@baobabbrands.com", "royden@baobabbrands.com", "ross@baobabbrands.com"];
    }

    // Function to check if the incoming request data for a booking is valid.
    function isValidBookingData(data) {
      return data.companyName is string &&
             data.contactName is string &&
             data.email is string &&
             data.phoneNumber is string &&
             data.businessVatNumber is string &&
             data.termsAccepted == true;
    }
    
    // Allow anyone to submit a message or reminder
    match /messages/{messageId} {
      allow read, write: if isAdmin();
      allow create: if true;
    }
    match /reminders/{reminderId} {
      allow read, write: if isAdmin();
      allow create: if true;
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read, delete: if isAdmin();
      
      // Allow users to create bookings.
      allow create: if request.auth != null && isValidBookingData(request.resource.data);

      // Allow users to update their own booking ONLY to remove a sponsored hole.
      // This is used by the 'release' admin action.
      allow update: if isAdmin() || (request.auth != null && request.resource.data.sponsoredHoleNumber == null);
    }

    // Holes collection
    match /holes/{holeId} {
      allow read: if true;
      allow write: if isAdmin();

      // Allow a user to update a hole IF it's part of a transaction where they are creating a booking.
      allow update: if request.auth != null &&
                      // The write must be part of a transaction.
                      getAfter(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)) != null &&
                      // The hole must be available before the update.
                      resource.data.status == 'available' &&
                      // The incoming data must set the status to 'pending'.
                      request.resource.data.status == 'pending' &&
                      // The bookingId must be set on the hole.
                      request.resource.data.bookingId is string;
    }
  }
}

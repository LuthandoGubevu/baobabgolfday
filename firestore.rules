rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is authenticated and has an admin role document
      // The admin role doc should exist at /roles/{user.email} with {role: "admin"}
      return request.auth != null && exists(/databases/$(database)/documents/roles/$(request.auth.token.email)) &&
             get(/databases/$(database)/documents/roles/$(request.auth.token.email)).data.role == 'admin';
    }

    // Bookings:
    // - Allow anyone to create a booking (submit the form).
    // - Allow only admins to read, update, or delete bookings.
    match /bookings/{bookingId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    // Holes:
    // - Allow anyone to read the status of holes (for the booking form).
    // - Allow only admins to update hole statuses.
    match /holes/{holeId} {
      allow read: if true;
      allow update: if isAdmin();
    }

    // Messages:
    // - Allow anyone to create a message (submit contact form).
    // - Allow only admins to read or delete messages.
    match /messages/{messageId} {
      allow create: if true;
      allow read, delete: if isAdmin();
    }
    
    // Reminders:
    // - Allow anyone to create a reminder (submit email).
    // - Allow only admins to read or delete reminders.
    match /reminders/{reminderId} {
      allow create: if true;
      allow read, delete: if isAdmin();
    }

    // Roles:
    // - Only admins can manage roles. This prevents non-admins from giving themselves
    //   admin privileges. This collection should be managed carefully, likely
    //   directly from the Firebase Console for initial setup.
    match /roles/{userEmail} {
      allow read, write: if isAdmin();
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin privileges
    function isAdmin() {
      return request.auth.token.email in ["roslyn@baobabbrands.com", "royden@baobabbrands.com", "ross@baobabbrands.com"];
    }

    // Bookings collection: Allow anyone to create, but only admins to read/update/delete.
    match /bookings/{bookingId} {
      allow read, update, delete: if isAdmin();
      allow create: if request.auth != null; // Allow any authenticated user to create
    }

    // Holes collection: Allow anyone to read, but only admins or a specific transaction to write.
    match /holes/{holeId} {
      allow read: if true;
      // Allow admins to update directly
      allow update: if isAdmin();
      // Allow a user to update a hole if they are creating a new booking in a transaction
      allow write: if request.auth != null && getAfter(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.email == request.auth.token.email;
    }
    
    // Messages collection: Allow anyone to create, but only admins to manage.
    match /messages/{messageId} {
      allow read, update, delete: if isAdmin();
      allow create: if true; // Anyone can send a message
    }
    
    // Reminders collection: Allow anyone to create, but only admins to manage.
    match /reminders/{reminderId} {
      allow read, update, delete: if isAdmin();
      allow create: if true; // Anyone can sign up for a reminder
    }
  }
}
